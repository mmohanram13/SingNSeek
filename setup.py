#!/usr/bin/env python3
"""
Setup script for SingN'Seek
Helps configure Elasticsearch and Vertex AI credentials
"""

import os
import sys
import yaml
from pathlib import Path
from typing import Dict


def print_header(text: str):
    """Print a formatted header."""
    print("\n" + "="*60)
    print(text.center(60))
    print("="*60 + "\n")


def print_step(step_num: int, text: str):
    """Print a step number and description."""
    print(f"\nüìã Step {step_num}: {text}")
    print("-" * 60)


def get_input(prompt: str, default: str = None) -> str:
    """Get user input with optional default."""
    if default:
        prompt = f"{prompt} [{default}]: "
    else:
        prompt = f"{prompt}: "
    
    value = input(prompt).strip()
    return value if value else default


def yes_no(prompt: str) -> bool:
    """Ask a yes/no question."""
    response = input(f"{prompt} (y/n): ").strip().lower()
    return response in ['y', 'yes']


def setup_elasticsearch() -> Dict:
    """Configure Elasticsearch settings."""
    print_step(1, "Elasticsearch Configuration")
    
    use_cloud = yes_no("Are you using Elastic Cloud?")
    
    config = {
        'elasticsearch': {
            'index_name': 'songs',
            'timeout': 30,
            'max_retries': 3,
            'retry_on_timeout': True
        }
    }
    
    if use_cloud:
        print("\nüìù For Elastic Cloud, you'll need:")
        print("   1. Cloud ID (from your deployment)")
        print("   2. API Key (create in Kibana > Stack Management > API Keys)")
        
        cloud_id = get_input("\nEnter your Cloud ID")
        api_key = get_input("Enter your API Key")
        
        config['elasticsearch']['cloud_id'] = cloud_id
        config['elasticsearch']['api_key'] = api_key
    else:
        print("\nüìù For local Elasticsearch:")
        
        host = get_input("Enter Elasticsearch host", "localhost")
        port = get_input("Enter Elasticsearch port", "9200")
        scheme = get_input("Enter scheme (http/https)", "http")
        
        config['elasticsearch']['host'] = host
        config['elasticsearch']['port'] = int(port)
        config['elasticsearch']['scheme'] = scheme
        
        use_api_key = yes_no("\nDo you want to use API Key authentication?")
        
        if use_api_key:
            api_key = get_input("Enter your API Key")
            config['elasticsearch']['api_key'] = api_key
        else:
            username = get_input("Enter username", "elastic")
            password = get_input("Enter password")
            config['elasticsearch']['username'] = username
            config['elasticsearch']['password'] = password
    
    # Add embedding and search settings
    config['embeddings'] = {
        'audio_dims': 512,
        'text_dims': 768
    }
    
    config['search'] = {
        'hybrid_alpha': 0.6,
        'top_k': 10,
        'rerank_top_k': 20
    }
    
    return config


def setup_vertex_ai() -> Dict:
    """Configure Vertex AI settings."""
    print_step(2, "Google Vertex AI Configuration")
    
    print("\nüìù You'll need:")
    print("   1. Google Cloud Project ID")
    print("   2. Service account JSON key file")
    print("   3. Vertex AI API enabled")
    
    project_id = get_input("\nEnter your Google Cloud Project ID")
    region = get_input("Enter your Google Cloud Region", "us-central1")
    
    credentials_path = get_input("Enter path to service account JSON key file")
    
    # Expand home directory
    credentials_path = os.path.expanduser(credentials_path)
    
    # Check if file exists
    if not os.path.exists(credentials_path):
        print(f"\n‚ö†Ô∏è  Warning: File not found at {credentials_path}")
        print("   You can set this later in the .env file")
    
    env_config = {
        'GOOGLE_CLOUD_PROJECT': project_id,
        'GOOGLE_CLOUD_REGION': region,
        'GOOGLE_APPLICATION_CREDENTIALS': credentials_path,
        'VERTEX_TEXT_EMBEDDING_MODEL': 'text-embedding-004',
        'VERTEX_RERANK_MODEL': 'gemini-1.5-flash-002',
        'MUQ_MODEL': 'OpenMuQ/MuQ-large-msd-iter',
        'MUQ_SAMPLE_RATE': '24000'
    }
    
    return env_config


def write_config_file(config: Dict, path: str):
    """Write configuration to YAML file."""
    with open(path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)
    print(f"\n‚úÖ Configuration saved to {path}")


def write_env_file(env_config: Dict, path: str):
    """Write environment variables to .env file."""
    with open(path, 'w') as f:
        f.write("# Google Vertex AI Configuration\n")
        f.write("# Generated by setup.py\n\n")
        
        for key, value in env_config.items():
            f.write(f"{key}={value}\n")
    
    print(f"‚úÖ Environment variables saved to {path}")


def test_configuration():
    """Test the configuration."""
    print_step(3, "Testing Configuration")
    
    try:
        import utils
        
        print("\nüîç Testing Elasticsearch connection...")
        es_client = utils.get_es_client()
        
        if es_client.get_client().ping():
            print("‚úÖ Successfully connected to Elasticsearch")
        else:
            print("‚ùå Failed to connect to Elasticsearch")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not test configuration: {str(e)}")
        print("   You can test later by running: python test_utils.py")


def main():
    """Main setup function."""
    print_header("üéµ SingN'Seek Setup Wizard üéµ")
    
    print("This wizard will help you configure SingN'Seek.")
    print("You can modify the configuration files later if needed.")
    
    # Check if config directory exists
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    # Setup Elasticsearch
    es_config = setup_elasticsearch()
    config_path = config_dir / "elastic_config.yaml"
    write_config_file(es_config, str(config_path))
    
    # Setup Vertex AI
    print()
    if yes_no("Do you want to configure Vertex AI now?"):
        env_config = setup_vertex_ai()
        write_env_file(env_config, ".env")
    else:
        print("\n‚ö†Ô∏è  Skipping Vertex AI configuration")
        print("   Text embeddings will not be available until configured")
        print("   Copy .env.example to .env and fill in your credentials")
    
    # Test configuration
    print()
    if yes_no("Do you want to test the configuration now?"):
        test_configuration()
    
    # Final instructions
    print_header("‚úÖ Setup Complete!")
    
    print("Next steps:")
    print("   1. Start Elasticsearch (if not already running)")
    print("   2. Run: streamlit run main.py")
    print("   3. Navigate to 'Manage' tab")
    print("   4. Click 'Create Index'")
    print("   5. Click 'Load Demo Data'")
    print("   6. Start searching!")
    
    print("\nüìö For more information, see README_NEW.md")
    print("\nüß™ To test functionality, run: python test_utils.py")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Setup failed: {str(e)}")
        sys.exit(1)
